Debian 9

Install Open VM Tools
Add the following line to the /etc/apt/sources.list file.
add contrib
Run the commands: 
apt update 
apt install open-vm-tools

PHP

apt-get install apt-transport-https lsb-release ca-certificates
wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
"deb https://packages.sury.org/php/ $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/php.list
apt update
apt install php7.2 php7.2-cli php7.2-mysql php7.2-odbc php7.2-xml php7.2-zip php7.2-soap php7.2-curl php7.2-gd php7.2-mbstring php7.2-json php7.2-bcmath php7.2-fpm php7.2-opcache php7.2-sqlite3 php7.2-sybase

# Alterar as configurações do php.cli
nano /etc/php/7.2/cli/php.ini
#Corrija:

max_execution_time = 330
memory_limit = 256M

#Alterar as configurações do phpfpm
nano /etc/php/7.2/fpm/php.ini
#Corrija:
max_execution_time = 330 memory_limit = 256M cgi.fix_pathinfo = 0

#Execute:
systemctl restart php7.2-fpm


MySQL

echo -e "deb http://repo.mysql.com/apt/debian/ stretch mysql-5.7\ndeb-src http://repo.mysql.com/apt/debian/ stretch mysql-5.7" > /etc/apt/sources.list.d/mysql.list
wget -O /tmp/RPM-GPG-KEY-mysql https://repo.mysql.com/RPM-GPG-KEY-mysql --no-check-certificate
apt-key add /tmp/RPM-GPG-KEY-mysql
apt update
apt install mysql-server

# Altere a configuração do MySQL para aceitar acessos externos ao localhost.

nano /etc/mysql/my.cnf

#Altere a linha:
bind_address = 127.0.0.1
#por
bind_address = <IP do servidor>

#Inclua outro usuário para acesso remoto usando a linha de comando do MySQL e a senha de root.
mysql -uroot -p

#mysql>
#Após conectar ao MySQL crie o novo usuário, para acesso remoto.

mysql> CREATE USER 'nome'@'%' IDENTIFIED BY 'senha';

#Forneça os privilégios aos usuário

mysql> GRANT ALL PRIVILEGES ON *.* TO 'nome'@'%' WITH GRANT OPTION;
# Atualize o sistema do MySQL para passarem a valer esses privilégios

mysql> FLUSH PRIVILEGES;
#Saia do MySQL

mysql> quit;
#Reinicie o MySQL para recarregar as configurações de acesso remoto.

service mysql restart

Nginx

apt install nginx

#Alterar as configurações do NGINX
nano /etc/nginx/sites-available/default
#Corrija:

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	index index.php index.html index.htm index.nginx-debian.html;

        # corrija o nome do servidor
	server_name <coloque o IP>;

	location / {
		try_files $uri $uri/ =404;
	}

	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	}

	location ~ /\.ht {
		deny all;
	}
}

#Teste seu arquivo de configuração para erros de sintaxe digitando:

nginx -t

#Se quaisquer erros forem reportados, retorne e cheque novamente seu arquivo antes de continuar.
#Quando estiver pronto, recarregue o Nginx para fazer as alterações necessárias:

systemctl reload nginx
# Crie o arquivo info.php para testar

nano /var/www/html/info.php
<?php

phpinfo();


# Instalação do Composer
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('SHA384', 'composer-setup.php') === '55d6ead61b29c7bdee5cccfb50076874187bd9f21f65d8991d46ec5cc90518f447387fb9f76ebae1fbbacf329e583e30') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"
mv composer.phar /usr/local/bin/composer

#Ativar syslog para o CRON
nano /etc/rsyslog.conf

#Localize a linha #cron.* -/var/log/cron
#Descomente, e reinicie o syslog

service rsyslog restart

# RSYNC NFe server FIGRANA <= NETFIMATEC

### Objetivo:
; Copiar as NFe do local atual em (SERVIDOR ORIGEM) para o (SERVIDOR DESTINO) onde roda o FIGRANA
; Copiar apenas o que foi modificado e incluido
; Isso deve rodar a cada 5 minutos (depois de completada a carga inicial), para permitir o sincronismo

## Criar o diretorio onde ficarão as NFe (SERVIDOR DESTINO)
; mkdir /var/nfe
; chmod -R 777 /var/nfe

## Criar as chaves no servidor do FIGRANA, usando o USER que fará a chama CRON (SERVIDOR DESTINO)
; ssh-keygen -f ~/.ssh/id_rsa -q -P ""
; cat ~/.ssh/id_rsa.pub

## Copiar a chave criada para o servidor ORIGEM (SERVIDOR DESTINO)

; scp ~/.ssh/id_rsa.pub root@192.168.0.2:~/figrana_key.pub

## No (SERVIDOR ORIGEM) criar a pasta e o arquivo (caso ainda não existam)

; mkdir ~/.ssh
; chmod 0700 ~/.ssh
; touch ~/.ssh/authorized_keys
; chmod 0644 ~/.ssh/authorized_keys

## Colocar a chave criada na pasta authorized_keys (SERVIDOR ORIGEM)

; cat ~/figrana_key.pub >> ~/.ssh/authorized_keys

# Criar o JOB BASH do rsync (SERVIDOR DESTINO)

; nano /var/www/figrana/jobs/job_rsync_nfe.sh
#! /bin/bash
rsync -avz -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' root@192.168.0.2:/var/www/nfe/ /var/www/nfe
chmod -R 777 /var/www/nfe

## Criar CRON JOB que será executado a cada 5 minutos (SERVIDOR DESTINO)
; Usar o WEBMIN ou 
; cd /etc/cron.d
; nano job_rsync_nfe

# Tarefa de sincronizacao das NFe
# Essa tarefa será executada
# */5  = a cada 5 minutos,
# 6-21 = das 6 às 21 horas,
# *    = todos os dias,
# *    = todos os meses,
# 1-6  = mas apenas de segunda a sábado
*/5 6-21 * * 1-6 root php /var/www/figrana/jobs/job_rsync_nfe.sh &> /dev/null







